auto.price$num.of.cylinders
auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve")
auto.price$num.cylinders <-
ifelse(auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve"))
num.cols <- c("wheel.base",
"width",
"height",
"curb.weight",
"engine.size",
"bore",
"compression.ratio",
"city.mpg",
"price",
"lnprice")
pairs(~ ., data = auto.price[, num.cols])
auto.hist <- function(data, x) {
library(ggplot2)
library(gridExtra)
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
plot.cols2[0]
plot.cols2 <- c("length","curb.weight","engine.size","city.mpg","price")
plot.cols2[1]
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
getPackages('ggplot2', 'gridExtra')
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
getPackages(c('ggplot2', 'gridExtra'))
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
getPackages(c('ggplot2', 'gridExtra'))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
getPackages(ggplot2, gridExtra)
getPackages(c(ggplot2, gridExtra)
getPackages <- function(x) {
x <- as.character(match.call()[[2]])
writeLines(sprintf('Testing %s is installed...', x))
if (!require(x, character.only = TRUE)) {
writeLines(sprintf('\tInstalling...', x))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
require(x, character.only = TRUE)
writeLines(sprintf('\tInstalled!', x))
}
}
getPackages <- function(x) {
x <- as.character(match.call()[[2]])
writeLines(sprintf('Testing %s is installed...', x))
if (!require(x, character.only = TRUE)) {
writeLines(sprintf('\tInstalling...', x))
install.packages(pkgs = x, repos = "http://cran.r-project.org")
require(x, character.only = TRUE)
writeLines(sprintf('\tInstalled!', x))
}
}
getPackages('ggplot2')
getPackages('gridExtra')
auto.price <- read.csv('C:/Users/xunil/Downloads/DAT203.1x/Mod4/Automobile price data _Raw_.csv', header = TRUE, stringsAsFactors = FALSE)
cols <- c('price', 'bore', 'stroke','horsepower', 'peak.rpm')
auto.price[, cols] <- lapply(auto.price[, cols], as.numeric)
auto.price <- auto.price[complete.cases(auto.price), ]
auto.price$lnprice <- log(auto.price$price)
auto.price$num.cylinders <-
ifelse(auto.price$num.of.cylinders %in% c("four", "three"), "threefour",
ifelse(auto.price$num.of.cylinders %in% c("five", "six"),
"five-six", "eight-twelve"))
num.cols <- c("wheel.base",
"width",
"height",
"curb.weight",
"engine.size",
"bore",
"compression.ratio",
"city.mpg",
"price",
"lnprice")
pairs(~ ., data = auto.price[, num.cols])
plot.cols2 <- c("length","curb.weight","engine.size","city.mpg","price")
auto.hist <- function(data, x) {
rg = range(auto.price[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
auto.hist <- function(data, x) {
rg = range(data[,x])
bw = (rg[2] - rg[1])/30
title <- paste("Histogram of", x, "conditioned on type of drive wheels")
ggplot(data, aes_string(x)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels) +
ggtitle(title)
}
auto.hist(auto.price, plot.cols2[1])
getPackages('dplyr')
lapply(plot.cols2, pryr::partial(auto.hist, data = auto.price))
getPackages('pryr')
lapply(plot.cols2, pryr::partial(auto.hist, data = auto.price))
auto.box <- function(data, x) {
title <- paste("Box plot of", x, "by type of drive wheels")
ggplot(auto.price, aes_string('drive.wheels', x)) +
geom_boxplot() +
ggtitle(title)
}
lapply(plot.cols2, pryr::partial(auto.box, data = auto.price))
plot.cols3 <- c("length","curb.weight","engine.size","city.mpg")
scatter.auto <- function(data, x){
require(ggplot2)
title <- paste("price vs.", x, 'with color by num.cylinders')
ggplot(data, aes_string(x, 'price')) +
geom_point(aes(color = factor(num.cylinders))) +
ggtitle(title)
}
lapply(plot.cols3, pryr::partial(scatter.auto, data = auto.price))
scatter.auto.cond <- function(data, x){
title <- paste("price vs.", x, 'with color by num.cylinders and body style')
ggplot(data, aes_string(x, 'price')) +
geom_point(aes(color = factor(fuel.type))) +
facet_grid(body.style ~ num.cylinders) +
ggtitle(title)
}
lapply(plot.cols3, pryr::partial(scatter.auto.cond, data = auto.price))
Income <- read.csv('C:/Users/xunil/Downloads/DAT203.1x/Mod4/Adult Census Income Binary Classification dataset.csv')
name.list <- function(x) {
names <- names(x)
len <- length(names)
names[-len]
}
name.list(Income)
names(Income)
feature.names <- name.list(Income)
feature.names <- name.list(Income)
lapply(feature.names, pryr::partial(bar.income, data = Income))
bar.income <- function(data, x){
if(!is.numeric(data[,x])) {
capture.output(
plot( ggplot(data, aes_string(x)) +
geom_bar() +
facet_grid(. ~ income) +
ggtitle(paste("Counts of income level by",x))))
}
}
lapply(feature.names, pryr::partial(bar.income, data = Income))
lapply(feature.names, pryr::partial(box.income, data = Income))
box.income <- function(data, x){
if(is.numeric(data[,x])) {
capture.output(
plot( ggplot(data, aes_string('income', x)) +
geom_boxplot() +
ggtitle(paste("Counts of income level by",x))))
}}
lapply(feature.names, pryr::partial(box.income, data = Income))
ggplot(auto.price)
ggplot(auto.price, aes(x = engine.size))
ggplot(auto.price, aes(x = engine.size))
+geom_histogram(aes(y = ..count..))
ggplot(auto.price, aes(x = engine.size))
+ geom_histogram(aes(y = ..count..), binwidth = 20)
ggplot(auto.price, aes(x = engine.size))
+ geom_histogram(aes(y = ..count..), binwidth = 20)
+ face)grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 20) +
face_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 20) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 30) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 5) +
facet_grid(. ~ drive.wheels)
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = 10) +
facet_grid(. ~ drive.wheels)
rg = range(auto.price[,engine.size])
rg = range(auto.price[,c("engine.size")])
bw = (rg[2] - rg[1])/30
ggplot(auto.price, aes(x = engine.size)) +
geom_histogram(aes(y = ..count..), binwidth = bw) +
facet_grid(. ~ drive.wheels)
ggplot(Income)
ggplot(Income, aes(x = income)) +
geom_boxplot()
ggplot(Income, aes(x = income)) +
geom_boxplot()
plot(ggplot(Income, aes(x = income)) +
geom_boxplot())
feature.names
ggplot(Income, aes(x = age)) +
geom_boxplot()
ggplot(Income, aes(x = income, y = age)) +
geom_boxplot()
ggplot(Income, aes(x = age, y = income)) +
geom_boxplot()
ggplot(Income, aes(x = income, y = age)) +
geom_boxplot()
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
data <- read.csv('activity.csv')
View(data)
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
hist(data[steps])
hist(data$steps)
data <- data[complete.cases(data$steps),]
hist(data$steps)
tapply(data$steps, data$date, sum)
stepsByDay <- tapply(data$steps, data$date, sum)
getPackage('dplyr)
getPackage('dplyr')
getPackage('dplyr')
stepsByDay <- data %>%
group_by(date) %>%
summarize(sum=sum(steps))
View(stepsByDay)
stepsByDay <- data %>%
group_by(date) %>%
summarize(steps=sum(steps))
hist(stepsByDay$steps)
summary(stepsByDay$steps)
median <- summ$Median
summ <- summary(stepsByDay$steps)
median <- summ$Median
mean <- mean(stepsByDay$steps)
hist(stepsByDay$steps)
mean <- mean(stepsByDay$steps)
median <- median(stepsByDay$steps)
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
plot(data$steps)
plot(data$date, data$steps)
plot(data$date, data$steps, type = "l")
plot(data$date, data$steps, plot.type = "l")
plot.ts(data$date, data$steps, plot.type = "l")
data$date <- as.Date(data$date)
plot.ts(data$date, data$steps, plot.type = "l")
plot(data$date, data$steps)
plot(data$date, data$steps, type = "l")
View(data)
meanStepsByInterval <- data %>%
group_by(interval) %>%
summarize(steps=mean(steps))
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
max(meanStepsByInterval$steps)
meanStepsByInterval$interval[,meanStepsByInterval$steps = max(meanStepsByInterval$steps)]
meanStepsByInterval$interval[,meanStepsByInterval$steps == max(meanStepsByInterval$steps)]
meanStepsByInterval$steps == max(meanStepsByInterval$steps)
meanStepsByInterval$interval[meanStepsByInterval$steps == max(meanStepsByInterval$steps),]
maximum = meanStepsByInterval$interval[meanStepsByInterval$steps == max(meanStepsByInterval$steps),]
maximum <- meanStepsByInterval[meanStepsByInterval$steps == max(meanStepsByInterval$steps),]
View(maximum)
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
plot(maximum$interval, maximum$steps, type = "l", col = 'red' )
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
maximum <- meanStepsByInterval[meanStepsByInterval$steps == max(meanStepsByInterval$steps),]
par(new=T)
plot(maximum$interval, maximum$steps, type = "l", col = 'red' )
par(new=T)
plot(maximum$interval, maximum$steps, type = "l", col = 'red',
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps))
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
maximum <- meanStepsByInterval[meanStepsByInterval$steps == max(meanStepsByInterval$steps),]
par(new=T)
plot(maximum$interval, maximum$steps, type = "l", col = 'red',
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps))
par(new=T)
plot(maximum$interval, maximum$steps, type = "l", col = 4,
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps))
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
par(new=T)
plot(maximum$interval, maximum$steps, type = "o", col = 'red',
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps),
axes = FALSE)
ticks = c(maximum$interval)
axis(side = 1, at = ticks)
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
par(new=T)
plot(maximum$interval, maximum$steps, type = "o", col = 'red',
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps),
axes = FALSE)
axis(side = 1, at = c(maximum$interval), col = 'red')
plot(meanStepsByInterval$interval, meanStepsByInterval$steps, type = "l")
par(new=T)
plot(maximum$interval, maximum$steps, type = "o", col = 'red',
xlim = range(meanStepsByInterval$interval),
ylim = range(meanStepsByInterval$steps),
axes = FALSE, xlab = "", ylab = "")
axis(side = 1, at = c(maximum$interval), col = 'red', )
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
is.na(data$steps)
count(is.na(data$steps))
sum(is.na(data$steps))
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
sum(is.na(data$steps))
View(data)
data$candidateStep <- data$interval
View(data)
data$candidateStep <- sapply(data$interval, function(x){return x;}}
data$candidateStep <- sapply(data$interval, function(x){x})
View(data)
data$candidateStep <- sapply(data$interval, function(x){x*2})
View(completeData)
View(data)
data$candidateStep <- sapply(data$interval, function(x){
meanStepsByInterval[meanStepsByInterval$interval == x,]$step
})
meanStepsByInterval[meanStepsByInterval$interval == 5,]
meanStepsByInterval[meanStepsByInterval$interval == 5,]
meanStepsByInterval[meanStepsByInterval$interval == 5,]$steps
data$candidateStep <- sapply(data$interval, function(x){
meanStepsByInterval[meanStepsByInterval$interval == x,]$steps
})
View(data)
data$candidateStep <- sapply(data$interval, function(x){
as.integer(meanStepsByInterval[meanStepsByInterval$interval == x,]$steps)
})
View(data)
data$candidateStep <- sapply(data, function(x){
as.integer(meanStepsByInterval[meanStepsByInterval$interval == x$interval,]$steps)
})
left_join(data, meanStepsByInterval, by = interval)
left_join(data, meanStepsByInterval, by = 'interval')
left_join(data, meanStepsByInterval, by = 'interval')$steps
j <- left_join(data, meanStepsByInterval, by = 'interval')
View(j)
j <- left_join(data, meanStepsByInterval, by = 'interval')$steps.y
data$candidateStep <- coalesce(data$steps,
left_join(data, meanStepsByInterval, by = 'interval')$steps.y)
data$candidateStep <- coalesce(data$steps,
as.integer(left_join(data, meanStepsByInterval, by = 'interval')$steps.y))
View(data)
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
View(completeData)
View(data)
filledStepsByDay <- filledData %>%
group_by(date) %>%
summarize(steps=sum(steps))
hist(filledStepsByDay$steps)
mean <- mean(filledStepsByDay$steps)
median <- median(filledStepsByDay$steps)
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
completedMean
filledMean
completedMedian
completedMean
completedMedian
completedMedian
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
filledStepsByDay$weekday <- weekday(filledData$date)
?weekday
??weekday
?weekdays
filledStepsByDay$weekday <- weekdays(filledData$date)
filledStepsByDay$weekday <- weekdays(as.date(filledData$date))
filledStepsByDay$weekday <- weekdays(as.Date(filledData$date))
as.Date(filledData$date)
weekdays(as.Date(filledData$date))
filledStepsByDay$weekday <- weekdays(as.Date(filledData$date))
filledData$weekday <- weekdays(as.Date(filledData$date))
View(filledData)
View(filledData)
filledData$weekday <- ifelse(filledData$weekday %in% c('Saturday',"Sunday"),
"Weekend", "Weekday")
View(filledData)
filledData$weekday <- weekdays(as.Date(filledData$date))
filledData$weekday <- as.factr(ifelse(filledData$weekday %in% c('Saturday',"Sunday"),
"Weekend", "Weekday"))
filledData$weekday <- weekdays(as.Date(filledData$date))
filledData$weekday <- as.factor(ifelse(filledData$weekday %in% c('Saturday',"Sunday"),
"Weekend", "Weekday"))
today()
Sys.Date()
weekdays(Sys.Date())
weekdays(Sys.Date()) %in% c("Sunday")
weekdays(Sys.Date()-1) %in% c("Sunday")
weekdays(Sys.Date()-1) %in% c("Saturday","Sunday")
weekdays(Sys.Date()) %in% c("Saturday","Sunday")
filledData$weekday <- weekdays(as.Date(filledData$date))
filledData$weekday <- as.factor(ifelse(filledData$weekday %in% c('Saturday',"Sunday"),
"Weekend", "Weekday"))
getPackage('ggplo2')
ggplot(filledData$date, filledData$steps)
getPackage('ggplot2')
ggplot(filledData$date, filledData$steps)
ggplot(filledData, aes(x = date, y = steps))
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
ggplot(filledStepsByInterval, aes(x = date, y = steps))
ggplot(filledStepsByInterval, aes(x = interval, y = steps))
ggplot(filledStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(weekday~.)
filledStepsByInterval = filledData %>%
group_by(c('interval','weekday')) %>%
summarize(steps=mean(steps))
ggplot(filledStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(weekday~.)
filledStepsByInterval = filledData %>%
group_by(c('interval','weekday')) %>%
summarize(steps=mean(steps))
filledStepsByInterval = filledData %>%
group_by(interval,weekday) %>%
summarize(steps=mean(steps))
ggplot(filledStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(weekday~.)
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
completewithzero <- completeAmData
data
rows(data)
count(data)
ggplot() +
rowc
union(data,data)
ud <- union(data,data)
View(ud)
completewithzero <- completeData
completewithzero <- completeData
completewithzero$Cat <- rep("WithZero", nrow(completewithzero))
completewithoutzero <- completeData[completeData$steps > 0,]
completewithoutzero$Cat <- rep("WithoutZero", nrow(completewithoutzero))
histData <- merge(completewithzero, completewithoutzero, ALL = TRUE)
histData$Cat = as.factor(histData$Cat)
completewithzero <- completeData
completewithzero$Cat <- rep("WithZero", nrow(completewithzero))
completewithoutzero <- completeData[completeData$steps > 0,]
completewithoutzero$Cat <- rep("WithoutZero", nrow(completewithoutzero))
histData <- merge(completewithzero, completewithoutzero, ALL = TRUE)
histData <- merge(completewithzero, completewithoutzero, all = TRUE)
:as.factor
?as.factor
ggplot(meanStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
geom_point(maximum, aes(x = interval, y = steps))
str(maximum)
ggplot(meanStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
geom_point(aes(x = maximum$interval, y = maximum$steps))
ggplot(meanStepsByInterval, aes(x = interval, y = steps)) +
geom_line() +
geom_point(aes(x = maximum$interval, y = maximum$steps), colour = 'red')
count(amdata$steps == 0)
count(data$steps == 0)
nrows(data$steps == 0)
data$steps == 0
count(completeAmData$steps == 0)
sum(completeAmData$steps == 0)
sprintf("%2.0f:%0.2f", 8.35)
printf("%2.0f:%0.2f", 8.35)
printf("%2.0f:%0.2f", c(8.35)
)
sprintf("%2.0f:%0.2f", c(8.35))
sprintf("%2.0f", c(8.35))
sprintf("%2.0f", c(8.35, 8.35))
sprintf("%2.0f", 8.35, 8.35)
sprintf("%2.0f:%0.2f", 8.35,8.35)
sprintf("%2.0f:%.2f", 8.35,8.35)
sprintf("%2.0f:%0.2f", 8.35,8.35)
sprintf("#", 8.35,8.35)
sprintf("%#", 8.35,8.35)
sprintf("%2", 8.35,8.35)
sprintf("%2f", 8.35,8.35)
sprintf("%2.2f", 8.35,8.35)
sprintf("%02.2f", 8.35)
sprintf("%02i", 8.35)
sprintf("%2i", round(8.35,0))
sprintf("%02i", round(8.35,0))
sprintf("%02i:%02i", round(8.35,0), 35)
sprintf("%02i:%02i", round(835/100,0), 35)
sprintf("%02i:%02i", round(835/100,0), (835%100))
sprintf("%02i:%02i", round(835/100,0), (835 MOD 100))
sprintf("%02i:%02i", round(835/100,0), (835 %% 100))
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
source('C:/github/xunilrj-RepData_PeerAssessment1/Process.R')
